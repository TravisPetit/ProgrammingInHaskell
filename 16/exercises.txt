Exercise 1

Recall that
add Zero m = m
add (Succ n) m = Succ (add n m)   (*)

To show:
add n (Succ m) = Succ (add n m)

Proof by induction on n.

Base case (n = Zero):
   add Zero (Succ m)
 = Succ m
 = Succ (add 0 m)

Inductive step (n -> Succ n):
   add (Succ n) (Succ m)
 = Succ (add n (Succ m))  (by *)
 = Succ (Succ (add n m))  (I.H.)
 = Succ (add (Succ n) m)  (by * in reverse)

Exercise 2

To show:
add n m = add m n

Proof by induction on n.

Base case (n = Zero):
   add Zero m
 = m
 = add m Zero  (by ex. assumption)

Inductive step (c -> Succ n):
   add (Succ n) m
 = Succ (add n m)  (by *)
 = Succ (add m n)  (I.H.)
 = add (Succ m) n  (by * in reverse)
 = add m (Succ n)  (by Ex 1)

Exercise 3

Recall that
all :: (a -> Bool) -> [a] -> Bool
all p [] = True
all p (x:xs) = px && all p xs

replicate :: Int -> a -> [a]
replicate 0 _ = []
replicate n x = x : replicate (n-1) x

To show:
all (== x) (replicate n x)

Proof by induction on n.

Base case (n = 0):
   all (== x) (replicate 0 x)
 = all (== x) []
 = True

Inductive step (n -> n+1):
   all (== x) (replicate (n+1) x)
 = all (== x) (x:replicate n x)
 = x==x && (all (==x) replicate n x)
 = True && True (I.H.)
 = True

Exercise 4

Recall that
(++) :: [a] -> [a]
[] ++ ys = ys
(x:xs) ++ ys = x : (xs ++ ys)  (!)

To show:
xs ++ [] = xs

Proof by induction on xs.

Base calse (xs = []):
[] ++ [] = []

Inductive step (xs -> x:xs):
   (x:xs) ++ []
 = x : (xs ++ [])
 = x : xs (I. H.)

To show:
xs ++ (ys ++ zs) = (xs ++ ys) ++ zs

Proof by induction on xs.

Base case (xs = []):
   [] ++ (ys ++ zs)
 = ys ++ zs
 = ([] ++ ys) ++ zs

Inductive step (xs -> x:xs):

   (x:xs) ++ (ys ++ zs)
 = x : (xs ++ (ys ++ zs))
 = x : ((xs ++ ys) ++ zs)  (I.H.)
 = (x:(xs ++ ys)) ++ zs  (by ! in reverse)
 = ((x:xs) ++ ys) ++ zs  (by ! in reverse)

Exercise 5
Unfortunuately can't solve it because the text for it doesn't render properly in the book.

Exercise 6

Let
data Tree = Leaf Int | Node Tree Tree

countLeaves :: Tree -> Int
countLeaves (Leaf _) = 1
countLeaves (Node l r) = countLeaves l + countLeaves r

countNodes :: Tree -> Int
countNodes (Leaf _) = 0
countNodes (Node l r) = 1 + countNodes l + countNodes r

To show:
countLeaves t = countNodes t + 1

Proof by induction on t.

Base case (t = Leaf _):
countLeaves (Leaf _) = 1 = 0 + 1 = countNodes (Leaf _) + 1

Inductive step (l, r -> Node l r):
   countLeaves (Node l r)
 = countLeaves l + countLeaves r
 = (countNodes l + 1) + (countNodes r + 1)   (I.H. twice)
 = (1 + countNodes l + countNodes r) + 1
 = countNodes (Node l r) + 1

Exercise 7

Let
Maybe a = Nothing | Just a

fmap :: (a -> b) -> Maybe a -> Maybe b
fmap f Nothing = Nothing
fmap f (Just x) = Just (f x)

To show:
fmap id = id

Proof:
fmap id (Nothing) = Nothing
fmap id (Just x) = Just (id x) = Just x

Let
f :: b -> c
g :: a -> b

To show:
fmap (f . g) = (fmap f) . (fmap g)

Proof:
fmap (f . g) Nothing = Nothing
fmap (f . g) (Just x) = Just (f (g x)) = (fmap f) (Just (g x)) = (fmap f) (fmap g (Just x)) = (fmap f) (fmap g x)

Exercise 8

Let
Tree a = Leaf a | Node (Tree a) (Tree a)

fmap :: (a -> b) -> Tree a -> Tree b
fmap f (Leaf x) = Leaf (f x)
fmap f (Node l r) = Node (fmap f l) (fmap f r)

To show:
fmap id t = t

Proof by induction on t.

Base case (t = Leaf x):
fmap id (Leaf x) = Leaf (id x) = Leaf x

Inductive step (l, r -> Node l r):
   fmap id (Node l r)
 = Node (fmap id l) (fmap id r)
 = Node l r    (I.H. twice)


Exercise 9

Let
pure :: a -> Maybe a
pure x = Just x

(<*>) :: Maybe (a -> b) -> Maybe a -> Maybe b
mf <*> mx = case mx of
  Nothing -> Nothing
  Just x -> case mf of
    Nothing -> Nothing
    Just f -> Just $ f x

To show:
pure id <*> x = x

Proof:
pure id <*> Nothing = Nothing
pure id <*> (Just u) = (\v -> Just v) u = Just u

To show:
pure (g x) = pure g <*> pure x

Proof:
   pure (g x)
 =Â Just (g x)
 = (\u -> Just u) (g x)
 = (\u -> Just $ g u) x
 = pure g <*> x

To show:
x <*> pure y = pure (\g -> g y) <*> x

Proof:
If x = Nothing then
   x <*> pure y
 = Nothing
 = anything <*> x
 = pure (\g -> g y) <*> x

If x = Just f then:
   (Just f) <*> (Just y)
 = Just $ f y
Moreover
   Just (\g -> g y) <*> (Just f)
 = Just $ (\g -> g y) f
 = Just $ f y
as desired.

To show:
x <*> (y <*> z) = (pure (.) <*> x <*> y) <*> z

If x = Nothing then
x <*> (y <*> z) = Nothing
Moreover
   (pure (.) <*> x <*> y) <*> z
 = ((pure (.) <*> x) <*> y) <*> z
 = (Nothing <*> y) <*> z
 = Nothing <*> z
 = Nothing

If x = Just f then
  If at least one of y or z is Nothing:
    x <*> (y <*> z) = (pure (.) <*> x <*> y) <*> z = Nothing

  If y = Just g, z = Just u:
  Just f <*> (Just g <*> Just u) = Just $ f $ g u
  Moreover
    (pure (.) <*> x <*> y) <*> z
  = (\f' -> \g' -> \x' -> Just $ f' $ g' x') <*> Just f <*> Just g <*> Just u
  = (\g' -> \x' -> Just $ f $ g x') <*> Just g <*> Just u
  = Just $ f $ g u

Now let
return :: a -> [a]
return x = [x]

(>>=) :: [a] -> (a -> [b]) -> [b]
xs >>= f = [y | x <- xs, y <- f x]

To show:
return x >>= f = f x

Proof:
   return x >>= f
 = [x] >>= f
 = [y | x' <- [x], y <- f x']
 = [y | y <- f x]
 = f x

To show:
mx >>= return = xs

Proof:
   xs >>= return
 = [y | x <- xs, y <- [x]]
 = [y | x <- xs, y = x]
 = [x | x <- xs]
 = xs

To show:
(xs >>= f) >>= g = xs >>= (\x -> (f x >>= g))

Proof:
   (xs >>= f) >>= g
 = [y | x <- xs, y <- f x] >>= g
 = [y'| x' <- [y | x <- xs, y <- f x], y' <- g x']
 = [y'| x <- xs, y <- f x, y' <- g y]
 = [y | x <- xs, y <- f x >>= g]
 = xs >>= (\x -> (f x >>= g))
